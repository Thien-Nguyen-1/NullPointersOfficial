import { describe, it, expect, vi, beforeEach } from 'vitest';
import { render, screen, fireEvent } from '@testing-library/react';
import React from 'react';
import { ModuleEditorComponent } from '../../../components/module-builder/ModuleEditorComponent';

// Mock console methods to avoid test output clutter
const originalConsoleError = console.error;
beforeEach(() => {
  console.error = vi.fn();
});
afterEach(() => {
  console.error = originalConsoleError;
});

// Mock all imported editor components
vi.mock('../../../editors/VisualFlashcardEditor', () => ({
  default: vi.fn(() => <div data-testid="flashcard-editor">Flashcard Editor</div>)
}));

vi.mock('../../../editors/VisualFillTheFormEditor', () => ({
  default: vi.fn(() => <div data-testid="fill-form-editor">Fill Form Editor</div>)
}));

vi.mock('../../../editors/VisualFlowChartQuiz', () => ({
  default: vi.fn(() => <div data-testid="flowchart-quiz">Flowchart Quiz</div>)
}));

vi.mock('../../../editors/VisualQuestionAndAnswerFormEditor', () => ({
  default: vi.fn(() => <div data-testid="qa-editor">Question & Answer Editor</div>)
}));

vi.mock('../../../editors/VisualMatchingQuestionsQuizEditor', () => ({
  default: vi.fn(() => <div data-testid="matching-editor">Matching Questions Editor</div>)
}));

vi.mock('../../../editors/RankingQuizEditor', () => ({
  default: vi.fn(() => <div data-testid="ranking-editor">Ranking Quiz Editor</div>)
}));

vi.mock('../../../editors/Headings', () => ({
  default: vi.fn(() => <div data-testid="headings-component">Headings Component</div>)
}));

vi.mock('../../../editors/DocumentUploader', () => ({
  DocumentEditorWrapper: vi.fn(() => <div data-testid="document-editor">Document Editor</div>)
}));

vi.mock('../../../editors/AudioUploader', () => ({
  AudioEditorWrapper: vi.fn(() => <div data-testid="audio-editor">Audio Editor</div>)
}));

vi.mock('../../../editors/InlinePictureUploader', () => ({
  InlinePictureEditorWrapper: vi.fn(() => <div data-testid="picture-editor">Picture Editor</div>)
}));

vi.mock('../../../editors/EmbeddedVideoEditor', () => ({
  EmbeddedVideoEditorWrapper: vi.fn(() => <div data-testid="video-editor">Video Editor</div>)
}));

describe('ModuleEditorComponent', () => {
  // Common props
  const mockStyles = {
    'module-item': 'module-item',
    'error': 'error',
    'remove-module-btn': 'remove-module-btn'
  };

  const mockRemoveModule = vi.fn();

  // Setup editorRefs and initialQuestionsRef
  let editorRefs;
  let initialQuestionsRef;

  beforeEach(() => {
    mockRemoveModule.mockClear();
    editorRefs = { current: {} };
    initialQuestionsRef = { current: {} };
  });

  // Test template component rendering - happy path
  it('renders template components correctly', () => {
    const templateModule = {
      id: '123456abcdef',
      componentType: 'template',
      type: 'Flashcard Quiz',
      quizType: 'flashcard'
    };

    render(
      <ModuleEditorComponent
        module={templateModule}
        editorRefs={editorRefs}
        initialQuestionsRef={initialQuestionsRef}
        removeModule={mockRemoveModule}
        moduleOptions={[]}
        media={[]}
        styles={mockStyles}
      />
    );

    // Check component type in heading
    expect(screen.getByText('Flashcard Quiz (ID: 123456...)')).toBeInTheDocument();
    // Check correct editor is rendered
    expect(screen.getByTestId('flashcard-editor')).toBeInTheDocument();
    // Check remove button exists
    expect(screen.getByText('Remove')).toBeInTheDocument();
  });

  // Test media component rendering
  it('renders media components correctly', () => {
    const mediaModule = {
      id: '123456abcdef',
      componentType: 'media',
      type: 'Upload Document',
      mediaType: 'document'
    };

    render(
      <ModuleEditorComponent
        module={mediaModule}
        editorRefs={editorRefs}
        initialQuestionsRef={initialQuestionsRef}
        removeModule={mockRemoveModule}
        moduleOptions={[]}
        media={[]}
        styles={mockStyles}
      />
    );

    // Check component type in heading
    expect(screen.getByText('Upload Document (ID: 123456...)')).toBeInTheDocument();
    // Check correct editor is rendered
    expect(screen.getByTestId('document-editor')).toBeInTheDocument();
  });

  // Test heading component rendering
  it('renders heading components correctly', () => {
    const headingModule = {
      id: '123456abcdef',
      componentType: 'heading',
      type: 'heading',
      size: 'h2'
    };

    render(
      <ModuleEditorComponent
        module={headingModule}
        editorRefs={editorRefs}
        initialQuestionsRef={initialQuestionsRef}
        removeModule={mockRemoveModule}
        moduleOptions={[]}
        media={[]}
        styles={mockStyles}
      />
    );

    // Heading components have different structure - no heading text with type and ID
    expect(screen.queryByText('heading (ID: 123456...)')).not.toBeInTheDocument();
    // Check correct editor is rendered
    expect(screen.getByTestId('headings-component')).toBeInTheDocument();
  });

  // Test handling unknown component types
  it('renders error message when component type is not found', () => {
    const unknownModule = {
      id: '123456abcdef',
      componentType: 'unknown',
      type: 'Unknown Type'
    };

    render(
      <ModuleEditorComponent
        module={unknownModule}
        editorRefs={editorRefs}
        initialQuestionsRef={initialQuestionsRef}
        removeModule={mockRemoveModule}
        moduleOptions={[]}
        media={[]}
        styles={mockStyles}
      />
    );

    // Check error message
    expect(screen.getByText('Unknown Type (ID: 123456...) - Error: No editor found')).toBeInTheDocument();
  });

  // Test special case for ranking quiz
  it('renders ranking quiz with special handling', () => {
    const rankingModule = {
      id: '123456abcdef',
      componentType: 'template',
      type: 'Ranking Quiz',
      quizType: 'ranking_quiz'
    };

    render(
      <ModuleEditorComponent
        module={rankingModule}
        editorRefs={editorRefs}
        initialQuestionsRef={initialQuestionsRef}
        removeModule={mockRemoveModule}
        moduleOptions={[]}
        media={[]}
        styles={mockStyles}
      />
    );

    // Check component type in heading
    expect(screen.getByText('Ranking Quiz (ID: 123456...)')).toBeInTheDocument();
    // Check correct editor is rendered
    expect(screen.getByTestId('ranking-editor')).toBeInTheDocument();
  });

  // Test ranking quiz with contentID
  it('renders ranking quiz with contentID as editorKey', () => {
    const rankingModuleWithContentID = {
      id: '123456abcdef',
      contentID: 'content-789',
      componentType: 'template',
      type: 'Ranking Quiz',
      quizType: 'ranking_quiz'
    };

    render(
      <ModuleEditorComponent
        module={rankingModuleWithContentID}
        editorRefs={editorRefs}
        initialQuestionsRef={initialQuestionsRef}
        removeModule={mockRemoveModule}
        moduleOptions={[]}
        media={[]}
        styles={mockStyles}
      />
    );

    // Check component type in heading
    expect(screen.getByText('Ranking Quiz (ID: 123456...)')).toBeInTheDocument();
    // Check correct editor is rendered
    expect(screen.getByTestId('ranking-editor')).toBeInTheDocument();
  });

  // Test each template type
  it('renders different template components based on type', () => {
    const templateTypes = [
      { type: 'Fill in the Blanks', testId: 'fill-form-editor' },
      { type: 'Flowchart Quiz', testId: 'flowchart-quiz' },
      { type: 'Question and Answer Form', testId: 'qa-editor' },
      { type: 'Matching Question Quiz', testId: 'matching-editor' }
    ];

    templateTypes.forEach(({ type, testId }) => {
      const module = {
        id: '123456abcdef',
        componentType: 'template',
        type: type
      };

      const { unmount } = render(
        <ModuleEditorComponent
          module={module}
          editorRefs={editorRefs}
          initialQuestionsRef={initialQuestionsRef}
          removeModule={mockRemoveModule}
          moduleOptions={[]}
          media={[]}
          styles={mockStyles}
        />
      );

      // Check correct editor is rendered
      expect(screen.getByTestId(testId)).toBeInTheDocument();
      unmount();
    });
  });

  // Test each media type
  it('renders different media components based on type', () => {
    const mediaTypes = [
      { type: 'Upload Audio', testId: 'audio-editor' },
      { type: 'Upload Image', testId: 'picture-editor' },
      { type: 'Link Video', testId: 'video-editor' }
    ];

    mediaTypes.forEach(({ type, testId }) => {
      const module = {
        id: '123456abcdef',
        componentType: 'media',
        type: type
      };

      const { unmount } = render(
        <ModuleEditorComponent
          module={module}
          editorRefs={editorRefs}
          initialQuestionsRef={initialQuestionsRef}
          removeModule={mockRemoveModule}
          moduleOptions={[]}
          media={[]}
          styles={mockStyles}
        />
      );

      // Check correct editor is rendered
      expect(screen.getByTestId(testId)).toBeInTheDocument();
      unmount();
    });
  });

  // Test remove module functionality
  it('calls removeModule with correct id when remove button is clicked', () => {
    const module = {
      id: '123456abcdef',
      componentType: 'template',
      type: 'Flashcard Quiz'
    };

    render(
      <ModuleEditorComponent
        module={module}
        editorRefs={editorRefs}
        initialQuestionsRef={initialQuestionsRef}
        removeModule={mockRemoveModule}
        moduleOptions={[]}
        media={[]}
        styles={mockStyles}
      />
    );

    // Click remove button
    fireEvent.click(screen.getByText('Remove'));

    // Check removeModule was called with correct ID
    expect(mockRemoveModule).toHaveBeenCalledWith('123456abcdef');
  });

  // Test with initialQuestions provided
  it('passes initialQuestions to editor component when available', () => {
    const module = {
      id: '123456abcdef',
      componentType: 'template',
      type: 'Flashcard Quiz'
    };

    initialQuestionsRef.current['123456abcdef'] = [{ question: 'Test question' }];

    render(
      <ModuleEditorComponent
        module={module}
        editorRefs={editorRefs}
        initialQuestionsRef={initialQuestionsRef}
        removeModule={mockRemoveModule}
        moduleOptions={[]}
        media={[]}
        styles={mockStyles}
      />
    );

    // Presence of editor is sufficient since we cannot easily test props passing with mocked components
    expect(screen.getByTestId('flashcard-editor')).toBeInTheDocument();
  });

  // Test with no initialQuestions
  it('passes empty array when no initialQuestions are available', () => {
    const module = {
      id: '123456abcdef',
      componentType: 'template',
      type: 'Flashcard Quiz'
    };

    // No initialQuestions for this module ID
    initialQuestionsRef.current = {};

    render(
      <ModuleEditorComponent
        module={module}
        editorRefs={editorRefs}
        initialQuestionsRef={initialQuestionsRef}
        removeModule={mockRemoveModule}
        moduleOptions={[]}
        media={[]}
        styles={mockStyles}
      />
    );

    // Presence of editor is sufficient
    expect(screen.getByTestId('flashcard-editor')).toBeInTheDocument();
  });
});